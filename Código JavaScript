CENTROS MÉDICOS

// Constantes para la API
const API_URL = 'https://localhost:7207/api/CentroMedicos';

// Elementos del DOM
const centroMedicoForm = document.getElementById('centroMedicoForm');
const centroIdInput = document.getElementById('centroId');
const nombreInput = document.getElementById('nombre');
const ciudadInput = document.getElementById('ciudad');
const direccionInput = document.getElementById('direccion');
const telefonoInput = document.getElementById('telefono');
const btnLimpiar = document.getElementById('btnLimpiar');
const btnBuscar = document.getElementById('btnBuscar');
const searchInput = document.getElementById('searchInput');
const tablaCentrosMedicos = document.getElementById('tablaCentrosMedicos').getElementsByTagName('tbody')[0];

// Función para cargar todos los centros médicos
async function cargarCentrosMedicos() {
  try {
    const response = await fetch(API_URL);
    if (!response.ok) {
      throw new Error('Error al cargar los centros médicos');
    }
    const data = await response.json();
    // Extraer el array de valores desde la respuesta
    const centrosMedicos = data.$values || [];
    mostrarCentrosMedicos(centrosMedicos);
  } catch (error) {
    console.error('Error:', error);
    alert('No se pudieron cargar los centros médicos. Por favor, intente nuevamente.');
  }
}

// Función para mostrar los centros médicos en la tabla
function mostrarCentrosMedicos(centrosMedicos) {
  // Limpiar la tabla
  tablaCentrosMedicos.innerHTML = '';
  
  // Verificar si hay centros para mostrar
  if (!centrosMedicos || centrosMedicos.length === 0) {
    const row = tablaCentrosMedicos.insertRow();
    const cell = row.insertCell(0);
    cell.colSpan = 6;
    cell.textContent = 'No hay centros médicos disponibles';
    cell.style.textAlign = 'center';
    return;
  }
  
  // Llenar la tabla con los datos
  centrosMedicos.forEach(centro => {
    const row = tablaCentrosMedicos.insertRow();
    
    row.insertCell(0).textContent = centro.centroID;
    row.insertCell(1).textContent = centro.nombre;
    row.insertCell(2).textContent = centro.ciudad;
    
    const cellDireccion = row.insertCell(3);
    cellDireccion.textContent = centro.direccion || '';
    cellDireccion.classList.add('direccion-cell');
    
    row.insertCell(4).textContent = centro.telefono || '';
    
    // Celda para acciones (editar y eliminar)
    const cellAcciones = row.insertCell(5);
    
    // Botón editar
    const btnEditar = document.createElement('button');
    btnEditar.innerHTML = '<i class="fas fa-edit"></i>';
    btnEditar.className = 'btn-action btn-edit';
    btnEditar.title = 'Editar';
    btnEditar.onclick = () => cargarCentroParaEditar(centro);
    cellAcciones.appendChild(btnEditar);
    
    // Botón eliminar
    const btnEliminar = document.createElement('button');
    btnEliminar.innerHTML = '<i class="fas fa-trash-alt"></i>';
    btnEliminar.className = 'btn-action btn-delete';
    btnEliminar.title = 'Eliminar';
    btnEliminar.onclick = () => eliminarCentroMedico(centro.centroID);
    cellAcciones.appendChild(btnEliminar);
  });
}

// Función para buscar centros médicos
async function buscarCentrosMedicos() {
  const searchTerm = searchInput.value.trim();
  
  try {
    let url = API_URL;
    if (searchTerm) {
      url = `${API_URL}/buscar?nombre=${encodeURIComponent(searchTerm)}`;
    }
    
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error('Error en la búsqueda');
    }
    
    const data = await response.json();
    // Extraer el array de valores desde la respuesta
    const centrosMedicos = data.$values || [];
    mostrarCentrosMedicos(centrosMedicos);
  } catch (error) {
    console.error('Error:', error);
    alert('Error al realizar la búsqueda. Por favor, intente nuevamente.');
  }
}

// Función para guardar un centro médico (crear o actualizar)
async function guardarCentroMedico(event) {
  event.preventDefault();
  
  const centroMedico = {
    nombre: nombreInput.value,
    ciudad: ciudadInput.value,
    direccion: direccionInput.value,
    telefono: telefonoInput.value,
    medicos: [] // Añadimos el campo 'medicos' vacío para mantener la estructura
  };
  
  const id = centroIdInput.value;
  const isEditing = id !== '';
  
  if (isEditing) {
    centroMedico.centroID = parseInt(id);
  }
  
  try {
    const url = isEditing ? `${API_URL}/${id}` : API_URL;
    const method = isEditing ? 'PUT' : 'POST';
    
    const response = await fetch(url, {
      method: method,
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(centroMedico)
    });
    
    if (!response.ok) {
      throw new Error(`Error al ${isEditing ? 'actualizar' : 'crear'} el centro médico`);
    }
    
    // Limpiar el formulario y recargar los datos
    limpiarFormulario();
    cargarCentrosMedicos();
    
    alert(`Centro médico ${isEditing ? 'actualizado' : 'creado'} correctamente`);
  } catch (error) {
    console.error('Error:', error);
    alert(`Error al ${isEditing ? 'actualizar' : 'crear'} el centro médico. Por favor, intente nuevamente.`);
  }
}

// Función para cargar un centro médico para editar
function cargarCentroParaEditar(centro) {
  centroIdInput.value = centro.centroID;
  nombreInput.value = centro.nombre;
  ciudadInput.value = centro.ciudad;
  direccionInput.value = centro.direccion || '';
  telefonoInput.value = centro.telefono || '';
  
  // Cambiar texto del formulario
  document.querySelector('.form-section h2').textContent = 'Editar Centro Médico';
}

// Función para eliminar un centro médico
async function eliminarCentroMedico(id) {
  if (!confirm('¿Está seguro que desea eliminar este centro médico?')) {
    return;
  }
  
  try {
    const response = await fetch(`${API_URL}/${id}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) {
      throw new Error('Error al eliminar el centro médico');
    }
    
    // Recargar la lista de centros médicos
    cargarCentrosMedicos();
    alert('Centro médico eliminado correctamente');
  } catch (error) {
    console.error('Error:', error);
    alert('Error al eliminar el centro médico. Por favor, intente nuevamente.');
  }
}

// Función para limpiar el formulario
function limpiarFormulario() {
  centroMedicoForm.reset();
  centroIdInput.value = '';
  document.querySelector('.form-section h2').textContent = 'Nuevo Centro Médico';
}

// Event Listeners
window.addEventListener('DOMContentLoaded', cargarCentrosMedicos);
centroMedicoForm.addEventListener('submit', guardarCentroMedico);
btnLimpiar.addEventListener('click', limpiarFormulario);
btnBuscar.addEventListener('click', buscarCentrosMedicos);
searchInput.addEventListener('keypress', function(e) {
  if (e.key === 'Enter') {
    buscarCentrosMedicos();
  }
});

CLIENTES

// Variables globales
const API_URL = 'https://localhost:7207/api/ClientesApi';
let clientes = [];
let clienteActual = null;

// Elementos DOM
const sidebar = document.getElementById('sidebar');
const overlay = document.getElementById('overlay');
const menuToggle = document.getElementById('menu-toggle');
const closeMenu = document.getElementById('close-menu');
const clienteForm = document.getElementById('clienteForm');
const formTitle = document.getElementById('formTitle');
const btnLimpiar = document.getElementById('btnLimpiar');
const searchInput = document.getElementById('searchInput');
const filterTipo = document.getElementById('filterTipo');
const btnBuscar = document.getElementById('btnBuscar');
const tablaClientes = document.getElementById('tablaClientes');
const clienteModal = document.getElementById('clienteModal');
const closeModal = document.querySelector('.close');

// ==================== Funcionalidad Menú Hamburguesa ====================
menuToggle.addEventListener('click', () => {
  sidebar.classList.add('active');
  overlay.classList.add('active');
});

closeMenu.addEventListener('click', () => {
  sidebar.classList.remove('active');
  overlay.classList.remove('active');
});

overlay.addEventListener('click', () => {
  sidebar.classList.remove('active');
  overlay.classList.remove('active');
});

// ==================== Funciones para gestionar clientes ====================

// Cargar todos los clientes
async function cargarClientes() {
  try {
    const response = await fetch(API_URL);
    if (!response.ok) {
      throw new Error('Error al cargar los clientes');
    }
    
    const data = await response.json();
    // Acceder a los valores dentro de la estructura de respuesta
    clientes = data.$values || [];
    mostrarClientes(clientes);
  } catch (error) {
    console.error('Error:', error);
    alert('No se pudieron cargar los clientes. Por favor, intente nuevamente.');
  }
}

// Mostrar los clientes en la tabla
function mostrarClientes(clientesArray) {
  const tbody = tablaClientes.querySelector('tbody');
  tbody.innerHTML = '';

  if (clientesArray.length === 0) {
    const row = document.createElement('tr');
    row.innerHTML = '<td colspan="6" class="text-center">No hay clientes disponibles</td>';
    tbody.appendChild(row);
    return;
  }

  clientesArray.forEach(cliente => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${cliente.clienteID}</td>
      <td>${cliente.nombre}</td>
      <td>${cliente.apellido}</td>
      <td class="truncate">${cliente.correo || '-'}</td>
      <td>${cliente.telefono || '-'}</td>
      <td>
        <button class="btn-action btn-view" data-id="${cliente.clienteID}" aria-label="Ver detalles">
          <i class="fas fa-eye"></i>
        </button>
        <button class="btn-action btn-edit" data-id="${cliente.clienteID}" aria-label="Editar">
          <i class="fas fa-edit"></i>
        </button>
        <button class="btn-action btn-delete" data-id="${cliente.clienteID}" aria-label="Eliminar">
          <i class="fas fa-trash"></i>
        </button>
      </td>
    `;
    tbody.appendChild(row);
  });

  // Agregar event listeners a los botones
  agregarEventosAcciones();
}

// Agregar eventos a los botones de acción
function agregarEventosAcciones() {
  // Botones de ver detalles
  document.querySelectorAll('.btn-view').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const clienteId = parseInt(e.currentTarget.dataset.id);
      cargarDetallesCliente(clienteId);
    });
  });

  // Botones de editar
  document.querySelectorAll('.btn-edit').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const clienteId = parseInt(e.currentTarget.dataset.id);
      cargarClienteParaEditar(clienteId);
    });
  });

  // Botones de eliminar
  document.querySelectorAll('.btn-delete').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const clienteId = parseInt(e.currentTarget.dataset.id);
      confirmarEliminacion(clienteId);
    });
  });
}

// Cargar un cliente para editar
async function cargarClienteParaEditar(id) {
  try {
    const response = await fetch(`${API_URL}/${id}`);
    if (!response.ok) {
      throw new Error('Error al cargar el cliente');
    }
    
    clienteActual = await response.json();
    
    // Llenar el formulario con los datos
    document.getElementById('clienteId').value = clienteActual.clienteID;
    document.getElementById('nombre').value = clienteActual.nombre;
    document.getElementById('apellido').value = clienteActual.apellido;
    document.getElementById('correo').value = clienteActual.correo || '';
    document.getElementById('telefono').value = clienteActual.telefono || '';
    
    // Estos campos no existen en el modelo actual, pero están en el HTML
    // Si se agregan a la API, descomenta estas líneas
    /*
    document.getElementById('fechaNacimiento').value = clienteActual.fechaNacimiento || '';
    document.getElementById('direccion').value = clienteActual.direccion || '';
    */
    
    formTitle.innerText = 'Editar Cliente';
  } catch (error) {
    console.error('Error:', error);
    alert('No se pudo cargar el cliente para editar. Por favor, intente nuevamente.');
  }
}

// Cargar detalles de un cliente para mostrar en el modal
async function cargarDetallesCliente(id) {
  try {
    const response = await fetch(`${API_URL}/${id}`);
    if (!response.ok) {
      throw new Error('Error al cargar los detalles del cliente');
    }
    
    const cliente = await response.json();
    
    // Llenar el modal con los datos
    document.getElementById('detailNombreCompleto').textContent = `${cliente.nombre} ${cliente.apellido}`;
    document.getElementById('detailCorreo').textContent = cliente.correo || 'No registrado';
    document.getElementById('detailTelefono').textContent = cliente.telefono || 'No registrado';
    
    // Estos campos no existen en el modelo actual, mostrar valor por defecto
    document.getElementById('detailFechaNacimiento').textContent = 'No registrado';
    document.getElementById('detailDireccion').textContent = 'No registrado';
    document.getElementById('detailUltimaConsulta').textContent = 'No hay consultas registradas';
    
    // Cargar consultas del cliente (si existen)
    const tbodyHistorial = document.querySelector('#tablaHistorialConsultas tbody');
    tbodyHistorial.innerHTML = '';
    
    if (cliente.consultas && cliente.consultas.$values && cliente.consultas.$values.length > 0) {
      cliente.consultas.$values.forEach(consulta => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${formatDate(consulta.fechaConsulta)}</td>
          <td>Dr(a). ${consulta.medicoID}</td>
          <td>${consulta.diagnostico || 'No registrado'}</td>
        `;
        tbodyHistorial.appendChild(row);
      });
      
      // Actualizar última consulta si hay datos
      if (cliente.consultas.$values.length > 0) {
        // Ordenar consultas por fecha para encontrar la más reciente
        const consultasOrdenadas = [...cliente.consultas.$values].sort((a, b) => 
          new Date(b.fechaConsulta) - new Date(a.fechaConsulta)
        );
        document.getElementById('detailUltimaConsulta').textContent = 
          `${formatDate(consultasOrdenadas[0].fechaConsulta)} con Dr(a). ${consultasOrdenadas[0].medicoID}`;
      }
    } else {
      const row = document.createElement('tr');
      row.innerHTML = '<td colspan="3" class="text-center">No hay consultas registradas</td>';
      tbodyHistorial.appendChild(row);
    }
    
    // Mostrar modal
    clienteModal.style.display = 'block';
  } catch (error) {
    console.error('Error:', error);
    alert('No se pudieron cargar los detalles del cliente. Por favor, intente nuevamente.');
  }
}

// Guardar cliente (crear o actualizar)
async function guardarCliente(event) {
  event.preventDefault();
  
  const clienteId = document.getElementById('clienteId').value;
  const esNuevo = !clienteId;
  
  // Crear objeto con los datos del formulario
  const clienteData = {
    nombre: document.getElementById('nombre').value,
    apellido: document.getElementById('apellido').value,
    correo: document.getElementById('correo').value,
    telefono: document.getElementById('telefono').value
  };
  
  // Si es una edición, agregar el ID
  if (!esNuevo) {
    clienteData.clienteID = parseInt(clienteId);
    // Mantener la referencia a consultas si existe
    if (clienteActual && clienteActual.consultas) {
      clienteData.consultas = clienteActual.consultas;
    }
  }
  
  try {
    const url = esNuevo ? API_URL : `${API_URL}/${clienteData.clienteID}`;
    const method = esNuevo ? 'POST' : 'PUT';
    
    const response = await fetch(url, {
      method: method,
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(clienteData)
    });
    
    if (!response.ok) {
      throw new Error(`Error al ${esNuevo ? 'crear' : 'actualizar'} el cliente`);
    }
    
    alert(`Cliente ${esNuevo ? 'creado' : 'actualizado'} exitosamente`);
    limpiarFormulario();
    cargarClientes();
  } catch (error) {
    console.error('Error:', error);
    alert(`No se pudo ${esNuevo ? 'crear' : 'actualizar'} el cliente. Por favor, intente nuevamente.`);
  }
}

// Confirmar eliminación de cliente
function confirmarEliminacion(id) {
  if (confirm('¿Está seguro de que desea eliminar este cliente? Esta acción no se puede deshacer.')) {
    eliminarCliente(id);
  }
}

// Eliminar cliente
async function eliminarCliente(id) {
  try {
    const response = await fetch(`${API_URL}/${id}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) {
      // Si el servidor devuelve un error, intentar obtener el mensaje
      const errorData = await response.json().catch(() => null);
      throw new Error(errorData?.message || 'Error al eliminar el cliente');
    }
    
    alert('Cliente eliminado exitosamente');
    cargarClientes();
  } catch (error) {
    console.error('Error:', error);
    alert('No se pudo eliminar el cliente. Verifique si tiene consultas asociadas.');
  }
}

// Limpiar formulario
function limpiarFormulario() {
  clienteForm.reset();
  document.getElementById('clienteId').value = '';
  formTitle.innerText = 'Nuevo Cliente';
  clienteActual = null;
}

// Buscar clientes
function buscarClientes() {
  const searchTerm = searchInput.value.toLowerCase();
  const filtroTipo = filterTipo.value;
  
  // Filtrar por término de búsqueda
  let clientesFiltrados = clientes.filter(cliente => {
    return cliente.nombre.toLowerCase().includes(searchTerm) ||
           cliente.apellido.toLowerCase().includes(searchTerm) ||
           (cliente.correo && cliente.correo.toLowerCase().includes(searchTerm));
  });
  
  // Si hay filtros adicionales, aplicarlos
  // (En este caso el filtro no aplica porque no tenemos un campo de estado en el modelo)
  if (filtroTipo) {
    // Implementar lógica de filtrado adicional cuando se agregue el campo
  }
  
  mostrarClientes(clientesFiltrados);
}

// Formatear fecha para mostrar
function formatDate(dateString) {
  if (!dateString) return 'N/A';
  
  const date = new Date(dateString);
  return date.toLocaleDateString('es-ES', {
    day: '2-digit', 
    month: '2-digit', 
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// ==================== Event Listeners ====================

// Evento submit del formulario
clienteForm.addEventListener('submit', guardarCliente);

// Evento botón limpiar
btnLimpiar.addEventListener('click', limpiarFormulario);

// Evento botón buscar
btnBuscar.addEventListener('click', buscarClientes);

// Evento input de búsqueda (búsqueda en tiempo real)
searchInput.addEventListener('input', buscarClientes);

// Evento cambio de filtro
filterTipo.addEventListener('change', buscarClientes);

// Evento cerrar modal
closeModal.addEventListener('click', () => {
  clienteModal.style.display = 'none';
});

// Cerrar modal al hacer clic fuera de él
window.addEventListener('click', (e) => {
  if (e.target === clienteModal) {
    clienteModal.style.display = 'none';
  }
});

// Cargar clientes al iniciar la página
document.addEventListener('DOMContentLoaded', () => {
  cargarClientes();
});

CONSULTA

// URLs de las API
    const URL_API_MEDICOS = 'https://localhost:7207/api/MedicosApi';
    const URL_API_ESPECIALIDADES = 'https://localhost:7207/api/Especialidades';
    const URL_API_CLIENTES = 'https://localhost:7207/api/ClientesApi';
    const URL_API_CONSULTAS = 'https://localhost:7207/api/ConsultasApi';

    // Referencias a elementos del DOM
    const sidebarElement = document.getElementById('sidebar');
    const overlayElement = document.getElementById('overlay');
    const menuToggleBtn = document.getElementById('menu-toggle');
    const closeMenuBtn = document.getElementById('close-menu');
    const formConsulta = document.getElementById('consultaForm');
    const selectEspecialidad = document.getElementById('especialidad');
    const selectMedico = document.getElementById('medico');
    const selectCliente = document.getElementById('cliente');
    const consultaModal = document.getElementById('consultaModal');
    const btnLimpiar = document.getElementById('btnLimpiar');
    const btnBuscar = document.getElementById('btnBuscar');
    const filterEspecialidad = document.getElementById('filterEspecialidad');
    const filterMedico = document.getElementById('filterMedico');
    const filterFecha = document.getElementById('filterFecha');
    const searchInput = document.getElementById('searchInput');
    const closeModalBtn = document.querySelector('.close');

    // Almacenamiento de datos
    let especialidades = [];
    let medicos = [];
    let clientes = [];
    let consultas = [];
    let consultaEditando = null;

    // Inicialización
    inicializarEventos();

    async function inicializar() {
        inicializarEventos();
        
        try {
            // Cargar datos secuencialmente para garantizar el orden
            await cargarEspecialidades();
            await cargarMedicos();
            await cargarClientes();
            // Solo cargar consultas cuando todo lo demás ha terminado
            await cargarConsultas();
        } catch (error) {
            console.error('Error durante la inicialización:', error);
            mostrarMensaje('Error al cargar datos. Por favor, recargue la página.', 'error');
        }
    }
    
    // Llamar a la función de inicialización
    inicializar();

    // Funciones de inicialización
    function inicializarEventos() {
        // Eventos del menú hamburguesa
        menuToggleBtn.addEventListener('click', abrirMenu);
        closeMenuBtn.addEventListener('click', cerrarMenu);
        overlayElement.addEventListener('click', cerrarMenu);

        // Eventos del formulario
        formConsulta.addEventListener('submit', guardarConsulta);
        btnLimpiar.addEventListener('click', limpiarFormulario);
        selectEspecialidad.addEventListener('change', filtrarMedicosPorEspecialidad);

        // Eventos de búsqueda y filtros
        btnBuscar.addEventListener('click', aplicarFiltros);
        filterEspecialidad.addEventListener('change', actualizarFiltroMedicos);
        
        // Evento del modal
        closeModalBtn.addEventListener('click', cerrarModal);
    }

    // Funciones del menú hamburguesa
    function abrirMenu() {
        sidebarElement.classList.add('active');
        overlayElement.classList.add('active');
    }

    function cerrarMenu() {
        sidebarElement.classList.remove('active');
        overlayElement.classList.remove('active');
    }

    // Funciones de carga de datos
    async function cargarEspecialidades() {
        try {
            const response = await fetch(URL_API_ESPECIALIDADES);
            if (!response.ok) throw new Error('Error al cargar especialidades');
            
            const data = await response.json();
            especialidades = data.$values || [];
            
            // Llenar selector de especialidades en el formulario
            selectEspecialidad.innerHTML = '<option value="">Seleccionar especialidad</option>';
            filterEspecialidad.innerHTML = '<option value="">Todas las especialidades</option>';
            
            especialidades.forEach(esp => {
                // Para el formulario
                const optionForm = document.createElement('option');
                optionForm.value = esp.especialidadID;
                optionForm.textContent = esp.nombre;
                selectEspecialidad.appendChild(optionForm);
                
                // Para el filtro
                const optionFilter = document.createElement('option');
                optionFilter.value = esp.especialidadID;
                optionFilter.textContent = esp.nombre;
                filterEspecialidad.appendChild(optionFilter);
            });
            
            console.log('Especialidades cargadas:', especialidades);
        } catch (error) {
            console.error('Error al cargar especialidades:', error);
            mostrarMensaje('Error al cargar especialidades', 'error');
            throw error; // Propagar el error para manejarlo en inicializar()
        }
    }

    async function cargarMedicos() {
        try {
            const response = await fetch(URL_API_MEDICOS);
            if (!response.ok) throw new Error('Error al cargar médicos');
            
            const data = await response.json();
            
            // Procesamiento mejorado para manejar diferentes estructuras de respuesta
            if (data.$values) {
                // Si es un array dentro de $values
                medicos = procesarDatosMedicos(data.$values);
            } else if (Array.isArray(data)) {
                // Si es un array directamente
                medicos = procesarDatosMedicos(data);
            } else {
                // Si es otro formato
                console.error('Formato de datos de médicos inesperado:', data);
                medicos = [];
            }
            
            console.log('Médicos cargados:', medicos);
            
            // Después de cargar médicos, si hay una especialidad seleccionada, actualizar selectores
            if (selectEspecialidad.value) {
                filtrarMedicosPorEspecialidad();
            }
            
            actualizarFiltroMedicos();
        } catch (error) {
            console.error('Error al cargar médicos:', error);
            mostrarMensaje('Error al cargar médicos', 'error');
        }
    }
    
    // Función para procesar los datos de médicos en diferentes formatos
// Función mejorada para procesar los datos de médicos
function procesarDatosMedicos(datos) {
    // Crear un mapa para resolver las referencias
    const refMap = new Map();
    
    // Primera pasada: construir el mapa de referencias
    function buildRefMap(obj) {
        if (!obj) return;
        
        if (obj.$id) {
            refMap.set(obj.$id, obj);
        }
        
        // Procesar objetos anidados
        for (const key in obj) {
            if (typeof obj[key] === 'object' && obj[key] !== null) {
                buildRefMap(obj[key]);
            }
        }
    }
    
    // Construir el mapa de referencias desde los datos
    datos.forEach(buildRefMap);
    
    // Segunda pasada: procesar los médicos
    const medicosProcessed = [];
    
    datos.forEach(med => {
        // Si es una referencia, buscar el objeto original
        if (med.$ref) {
            med = refMap.get(med.$ref);
            if (!med) return; // Si no se encuentra la referencia, saltar
        }
        
        // Extraer la información básica del médico
        const medico = {
            medicoID: med.medicoID,
            nombre: med.nombre,
            apellido: med.apellido,
            especialidadID: med.especialidadID,
            centroID: med.centroID,
            email: med.email,
            telefono: med.telefono
        };
        
        // Añadir información de especialidad si está disponible
        if (med.especialidad) {
            // Si especialidad es una referencia, resolverla
            let especialidad = med.especialidad;
            if (especialidad.$ref) {
                especialidad = refMap.get(especialidad.$ref);
            }
            
            if (especialidad) {
                medico.especialidad = {
                    especialidadID: especialidad.especialidadID,
                    nombre: especialidad.nombre,
                    descripcion: especialidad.descripcion
                };
            }
        }
        
        // Añadir información de centro si está disponible
        if (med.centro) {
            // Si centro es una referencia, resolverla
            let centro = med.centro;
            if (centro.$ref) {
                centro = refMap.get(centro.$ref);
            }
            
            if (centro) {
                medico.centro = {
                    centroID: centro.centroID,
                    nombre: centro.nombre,
                    ciudad: centro.ciudad,
                    direccion: centro.direccion,
                    telefono: centro.telefono
                };
            }
        }
        
        // Verificar si este médico ya existe en el array (para evitar duplicados)
        const medicoExistente = medicosProcessed.find(m => m.medicoID === medico.medicoID);
        if (!medicoExistente) {
            medicosProcessed.push(medico);
        }
    });
    
    console.log('Médicos procesados:', medicosProcessed);
    return medicosProcessed;
}

    async function cargarClientes() {
        try {
            const response = await fetch(URL_API_CLIENTES);
            if (!response.ok) throw new Error('Error al cargar clientes');
            
            const data = await response.json();
            
            if (data.$values) {
                clientes = data.$values;
            } else if (Array.isArray(data)) {
                clientes = data;
            } else {
                console.error('Formato de datos de clientes inesperado:', data);
                clientes = [];
            }
            
            // Llenar selector de clientes
            selectCliente.innerHTML = '<option value="">Seleccionar paciente</option>';
            clientes.forEach(cliente => {
                const option = document.createElement('option');
                option.value = cliente.clienteID;
                option.textContent = `${cliente.nombre} ${cliente.apellido}`;
                selectCliente.appendChild(option);
            });
        } catch (error) {
            console.error('Error al cargar clientes:', error);
            mostrarMensaje('Error al cargar clientes', 'error');
        }
    }

    async function cargarConsultas() {
        try {
            const response = await fetch(URL_API_CONSULTAS);
            if (!response.ok) throw new Error('Error al cargar consultas');
            
            const data = await response.json();
            
            // Mapa para resolver referencias
            const refMap = new Map();
            
            // Construir mapa de referencias
            function buildRefMap(obj) {
                if (!obj) return;
                
                if (obj.$id) {
                    refMap.set(obj.$id, obj);
                }
                
                // Procesar objetos anidados
                for (const key in obj) {
                    if (typeof obj[key] === 'object' && obj[key] !== null) {
                        buildRefMap(obj[key]);
                    }
                }
            }
            
            // Procesar datos
            if (data.$id) {
                buildRefMap(data);
            }
            
            let consultasData = [];
            
            if (data.$values) {
                consultasData = data.$values;
            } else if (Array.isArray(data)) {
                consultasData = data;
            } else {
                console.error('Formato de datos de consultas inesperado:', data);
                consultasData = [];
            }
            
            // Procesar consultas y resolver referencias
            consultas = consultasData.map(consulta => {
                // Si es una referencia, resolverla
                if (consulta.$ref) {
                    consulta = refMap.get(consulta.$ref);
                    if (!consulta) return null;
                }
                
                return {
                    consultaID: consulta.consultaID,
                    medicoID: consulta.medicoID,
                    clienteID: consulta.clienteID,
                    fechaConsulta: consulta.fechaConsulta,
                    diagnostico: consulta.diagnostico,
                    tratamiento: consulta.tratamiento
                };
            }).filter(c => c !== null); // Eliminar las consultas nulas
            
            actualizarTablaConsultas();
        } catch (error) {
            console.error('Error al cargar consultas:', error);
            mostrarMensaje('Error al cargar consultas', 'error');
        }
    }

    // Función para filtrar médicos según la especialidad seleccionada
    // Mejorar la función de filtrado de médicos por especialidad
    function filtrarMedicosPorEspecialidad() {
        const especialidadId = selectEspecialidad.value;
        
        // Limpiar selector de médicos
        selectMedico.innerHTML = '<option value="">Seleccionar médico</option>';
        
        if (!especialidadId) return;
        
        console.log(`Filtrando médicos por especialidad ID: ${especialidadId}`);
        
        // Filtrar médicos por especialidad (convertir IDs a enteros para comparación)
        const medicosFiltrados = medicos.filter(medico => {
            return parseInt(medico.especialidadID) === parseInt(especialidadId);
        });
        
        console.log('Médicos filtrados:', medicosFiltrados);
        
        // Llenar selector con médicos filtrados
        medicosFiltrados.forEach(medico => {
            const option = document.createElement('option');
            option.value = medico.medicoID;
            option.textContent = `${medico.nombre} ${medico.apellido}`;
            selectMedico.appendChild(option);
        });
        
        // Si no hay médicos para la especialidad seleccionada
        if (medicosFiltrados.length === 0) {
            const option = document.createElement('option');
            option.value = "";
            option.textContent = "No hay médicos disponibles para esta especialidad";
            option.disabled = true;
            selectMedico.appendChild(option);
        }
    }


    function actualizarFiltroMedicos() {
        const especialidadId = filterEspecialidad.value;
        
        // Limpiar selector de filtro de médicos
        filterMedico.innerHTML = '<option value="">Todos los médicos</option>';
        
        let medicosMostrar = medicos;
        
        // Si hay una especialidad seleccionada, filtrar médicos
        if (especialidadId) {
            medicosMostrar = medicos.filter(medico => 
                parseInt(medico.especialidadID) === parseInt(especialidadId)
            );
        }
        
        console.log('Médicos para filtro:', medicosMostrar);
        
        // Llenar selector de filtro con médicos
        medicosMostrar.forEach(medico => {
            const option = document.createElement('option');
            option.value = medico.medicoID;
            option.textContent = `${medico.nombre} ${medico.apellido}`;
            filterMedico.appendChild(option);
        });
    }

    // Operaciones CRUD para consultas
    async function guardarConsulta(e) {
        e.preventDefault();
        
        // Validar formulario
        if (!validarFormulario()) return;
        
        // Obtener datos del formulario
        const consultaId = document.getElementById('consultaId').value;
        const medicoId = selectMedico.value;
        const clienteId = selectCliente.value;
        const fechaConsulta = document.getElementById('fechaConsulta').value;
        const diagnostico = document.getElementById('diagnostico').value;
        const tratamiento = document.getElementById('tratamiento').value;
        
        // Crear objeto de consulta
        const consultaData = {
            medicoID: parseInt(medicoId),
            clienteID: parseInt(clienteId),
            fechaConsulta: fechaConsulta,
            diagnostico: diagnostico,
            tratamiento: tratamiento
        };
        
        try {
            let response;
            
            if (consultaId) {
                // Actualizar consulta existente
                consultaData.consultaID = parseInt(consultaId);
                response = await fetch(`${URL_API_CONSULTAS}/${consultaId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(consultaData)
                });
                
                if (!response.ok) throw new Error('Error al actualizar la consulta');
                mostrarMensaje('Consulta actualizada correctamente', 'success');
            } else {
                // Crear nueva consulta
                response = await fetch(URL_API_CONSULTAS, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(consultaData)
                });
                
                if (!response.ok) throw new Error('Error al crear la consulta');
                mostrarMensaje('Consulta guardada correctamente', 'success');
            }
            
            // Recargar consultas y limpiar formulario
            await cargarConsultas();
            limpiarFormulario();
            
        } catch (error) {
            console.error('Error al guardar consulta:', error);
            mostrarMensaje('Error al guardar la consulta', 'error');
        }
    }
    
    async function eliminarConsulta(consultaId) {
        if (!confirm('¿Está seguro de eliminar esta consulta?')) return;
        
        try {
            const response = await fetch(`${URL_API_CONSULTAS}/${consultaId}`, {
                method: 'DELETE'
            });
            
            if (!response.ok) throw new Error('Error al eliminar la consulta');
            
            mostrarMensaje('Consulta eliminada correctamente', 'success');
            await cargarConsultas();
            
        } catch (error) {
            console.error('Error al eliminar consulta:', error);
            mostrarMensaje('Error al eliminar la consulta', 'error');
        }
    }
    
    function editarConsulta(consulta) {
        console.log('Editando consulta:', consulta);
        
        // Establecer modo edición
        document.getElementById('formTitle').textContent = 'Editar Consulta';
        document.getElementById('consultaId').value = consulta.consultaID;
        
        // Obtener especialidad del médico
        const medico = medicos.find(m => m.medicoID == consulta.medicoID);
        if (!medico) {
            console.error('Médico no encontrado:', consulta.medicoID);
            return;
        }
        
        // Cargar datos en el formulario
        selectEspecialidad.value = medico.especialidadID;
        
        // Disparar el evento change para actualizar los médicos según la especialidad
        const event = new Event('change');
        selectEspecialidad.dispatchEvent(event);
        
        // Esperar un momento para que se actualice el selector de médicos
        setTimeout(() => {
            selectMedico.value = consulta.medicoID;
            selectCliente.value = consulta.clienteID;
            document.getElementById('fechaConsulta').value = formatearFechaISO(consulta.fechaConsulta);
            document.getElementById('diagnostico').value = consulta.diagnostico || '';
            document.getElementById('tratamiento').value = consulta.tratamiento || '';
            
            // Guardar referencia a la consulta que se está editando
            consultaEditando = consulta;
            
            // Desplazarse al formulario
            formConsulta.scrollIntoView({ behavior: 'smooth' });
        }, 300); // Aumentado a 300ms para dar más tiempo a la actualización del selector
    }
    
    function verDetalleConsulta(consulta) {
        console.log('Viendo detalles de consulta:', consulta);
        
        // Buscar médico por ID
        const medico = medicos.find(m => m.medicoID == consulta.medicoID);
        
        // Completar datos en el modal
        document.getElementById('detailEspecialidad').textContent = 
            medico ? obtenerNombreEspecialidad(medico.especialidadID) : 'No disponible';
        
        document.getElementById('detailMedico').textContent = 
            medico ? `${medico.nombre} ${medico.apellido}` : 'No disponible';
        
        const cliente = clientes.find(c => c.clienteID == consulta.clienteID);
        document.getElementById('detailPaciente').textContent = 
            cliente ? `${cliente.nombre} ${cliente.apellido}` : 'No disponible';
        
        document.getElementById('detailFecha').textContent = formatearFecha(consulta.fechaConsulta);
        document.getElementById('detailDiagnostico').textContent = consulta.diagnostico || 'No registrado';
        document.getElementById('detailTratamiento').textContent = consulta.tratamiento || 'No registrado';
        
        // Mostrar modal
        consultaModal.style.display = 'block';
    }
    
    function cerrarModal() {
        consultaModal.style.display = 'none';
    }
    
    function limpiarFormulario() {
        document.getElementById('formTitle').textContent = 'Nueva Consulta';
        document.getElementById('consultaId').value = '';
        formConsulta.reset();
        selectMedico.innerHTML = '<option value="">Seleccionar médico</option>';
        consultaEditando = null;
    }
    
    // Función para validar el formulario
    function validarFormulario() {
        const medicoId = selectMedico.value;
        const clienteId = selectCliente.value;
        const fechaConsulta = document.getElementById('fechaConsulta').value;
        
        if (!medicoId) {
            mostrarMensaje('Debe seleccionar un médico', 'error');
            return false;
        }
        
        if (!clienteId) {
            mostrarMensaje('Debe seleccionar un paciente', 'error');
            return false;
        }
        
        if (!fechaConsulta) {
            mostrarMensaje('Debe seleccionar una fecha de consulta', 'error');
            return false;
        }
        
        return true;
    }

    // Funciones para la tabla de consultas
    function actualizarTablaConsultas(consultasFiltradas = null) {
        const tabla = document.getElementById('tablaConsultas').getElementsByTagName('tbody')[0];
    const listaConsultas = consultasFiltradas || consultas;
        
        // Limpiar tabla
        tabla.innerHTML = '';
        
        if (listaConsultas.length === 0) {
            const fila = tabla.insertRow();
            const celda = fila.insertCell();
            celda.colSpan = 8;
            celda.textContent = 'No hay consultas registradas';
            celda.className = 'no-data';
            return;
        }
        
        // Llenar tabla con datos
        listaConsultas.forEach(consulta => {
            const fila = tabla.insertRow();
            
            // Buscar médico
            const medico = medicos.find(m => m.medicoID == consulta.medicoID);
            
            // Buscar especialidad
            let especialidadNombre = 'Desconocida';
            if (medico) {
                especialidadNombre = obtenerNombreEspecialidad(medico.especialidadID);
            }
            
            // Buscar cliente
            const cliente = clientes.find(c => c.clienteID == consulta.clienteID);
            
            // Insertar celdas
            fila.insertCell().textContent = consulta.consultaID;
            fila.insertCell().textContent = medico ? `${medico.nombre} ${medico.apellido}` : 'Desconocido';
            fila.insertCell().textContent = especialidadNombre;
            fila.insertCell().textContent = cliente ? `${cliente.nombre} ${cliente.apellido}` : 'Desconocido';
            fila.insertCell().textContent = formatearFecha(consulta.fechaConsulta);
            
            const celdaDiagnostico = fila.insertCell();
            celdaDiagnostico.textContent = consulta.diagnostico ? 
                (consulta.diagnostico.length > 20 ? consulta.diagnostico.substring(0, 20) + '...' : consulta.diagnostico) : 
                'No registrado';
            
            const celdaTratamiento = fila.insertCell();
            celdaTratamiento.textContent = consulta.tratamiento ? 
                (consulta.tratamiento.length > 20 ? consulta.tratamiento.substring(0, 20) + '...' : consulta.tratamiento) : 
                'No registrado';
            
            // Celda de acciones
            const celdaAcciones = fila.insertCell();
            
            // Botón ver detalles
            const btnVer = document.createElement('button');
            btnVer.innerHTML = '<i class="fas fa-eye"></i>';
            btnVer.className = 'btn-icon btn-view';
            btnVer.title = 'Ver detalles';
            btnVer.onclick = () => verDetalleConsulta(consulta);
            celdaAcciones.appendChild(btnVer);
            
            // Botón editar
            const btnEditar = document.createElement('button');
            btnEditar.innerHTML = '<i class="fas fa-edit"></i>';
            btnEditar.className = 'btn-icon btn-edit';
            btnEditar.title = 'Editar';
            btnEditar.onclick = () => editarConsulta(consulta);
            celdaAcciones.appendChild(btnEditar);
            
            // Botón eliminar
            const btnEliminar = document.createElement('button');
            btnEliminar.innerHTML = '<i class="fas fa-trash"></i>';
            btnEliminar.className = 'btn-icon btn-delete';
            btnEliminar.title = 'Eliminar';
            btnEliminar.onclick = () => eliminarConsulta(consulta.consultaID);
            celdaAcciones.appendChild(btnEliminar);
        });
    }
    
    // Funciones para filtrado y búsqueda
    function aplicarFiltros() {
        const filtroEspecialidad = filterEspecialidad.value;
        const filtroMedico = filterMedico.value;
        const filtroFecha = filterFecha.value;
        const textoBusqueda = searchInput.value.toLowerCase();
        
        // Aplicar filtros
        let consultasFiltradas = consultas;
        
        // Filtrar por especialidad (a través del médico)
        if (filtroEspecialidad) {
            consultasFiltradas = consultasFiltradas.filter(consulta => {
                const medico = medicos.find(m => m.medicoID == consulta.medicoID);
                return medico && parseInt(medico.especialidadID) === parseInt(filtroEspecialidad);
            });
        }
        
        // Filtrar por médico
        if (filtroMedico) {
            consultasFiltradas = consultasFiltradas.filter(consulta => 
                parseInt(consulta.medicoID) === parseInt(filtroMedico)
            );
        }
        
        // Filtrar por fecha
        if (filtroFecha) {
            const fechaSeleccionada = new Date(filtroFecha);
            fechaSeleccionada.setHours(0, 0, 0, 0);
            
            consultasFiltradas = consultasFiltradas.filter(consulta => {
                const fechaConsulta = new Date(consulta.fechaConsulta);
                fechaConsulta.setHours(0, 0, 0, 0);
                return fechaConsulta.getTime() === fechaSeleccionada.getTime();
            });
        }
        
        // Buscar por texto
        if (textoBusqueda) {
            consultasFiltradas = consultasFiltradas.filter(consulta => {
                // Buscar en médico
                const medico = medicos.find(m => m.medicoID == consulta.medicoID);
                const nombreMedico = medico ? `${medico.nombre} ${medico.apellido}`.toLowerCase() : '';
                
                // Buscar en cliente
                const cliente = clientes.find(c => c.clienteID == consulta.clienteID);
                const nombreCliente = cliente ? `${cliente.nombre} ${cliente.apellido}`.toLowerCase() : '';
                
                // Buscar en diagnóstico y tratamiento
                const diagnostico = (consulta.diagnostico || '').toLowerCase();
                const tratamiento = (consulta.tratamiento || '').toLowerCase();
                
                return nombreMedico.includes(textoBusqueda) || 
                       nombreCliente.includes(textoBusqueda) || 
                       diagnostico.includes(textoBusqueda) || 
                       tratamiento.includes(textoBusqueda);
            });
        }
        
        // Actualizar tabla con resultados filtrados
        actualizarTablaConsultas(consultasFiltradas);
    }
    
    // Funciones utilitarias
    function obtenerNombreEspecialidad(especialidadId) {
        if (!especialidadId) return 'Desconocida';
        
        const especialidadIdInt = parseInt(especialidadId);
        const especialidad = especialidades.find(e => parseInt(e.especialidadID) === especialidadIdInt);
        return especialidad ? especialidad.nombre : 'Desconocida';
    }
    
    function formatearFecha(fechaStr) {
        if (!fechaStr) return 'Fecha no disponible';
        
        try {
            const fecha = new Date(fechaStr);
            return fecha.toLocaleString('es-ES', { 
                day: '2-digit', 
                month: '2-digit', 
                year: 'numeric',
                hour: '2-digit', 
                minute: '2-digit'
            });
        } catch (error) {
            console.error('Error al formatear fecha:', error);
            return 'Fecha inválida';
        }
    }
    
    function formatearFechaISO(fechaStr) {
        if (!fechaStr) return '';
        
        try {
            const fecha = new Date(fechaStr);
            const tzoffset = fecha.getTimezoneOffset() * 60000; // offset en milisegundos
            const fechaLocal = new Date(fecha.getTime() - tzoffset);
            return fechaLocal.toISOString().slice(0, 16); // Formato: YYYY-MM-DDTHH:MM
        } catch (error) {
            console.error('Error al formatear fecha ISO:', error);
            return '';
        }
    }
    
    function mostrarMensaje(mensaje, tipo) {
        alert(mensaje);
    }
    
    // Cerrar modal al hacer clic fuera de él
    window.onclick = function(event) {
        if (event.target == consultaModal) {
            cerrarModal();
        }
    };
});

EMPLEADOS

// URL base de la API
const API_URL = 'https://localhost:7207/api/EmpleadosApi';

// DOM elements
const empleadoForm = document.getElementById('empleadoForm');
const empleadoIdInput = document.getElementById('empleadoId');
const nombreInput = document.getElementById('nombre');
const apellidoInput = document.getElementById('apellido');
const cargoInput = document.getElementById('cargo');
const emailInput = document.getElementById('email');
const telefonoInput = document.getElementById('telefono');
const btnLimpiar = document.getElementById('btnLimpiar');
const btnBuscar = document.getElementById('btnBuscar');
const searchInput = document.getElementById('searchInput');
const tablaEmpleados = document.getElementById('tablaEmpleados').getElementsByTagName('tbody')[0];

// Estado de la aplicación
let empleados = [];
let editando = false;

// Cargar datos al iniciar
document.addEventListener('DOMContentLoaded', () => {
  cargarEmpleados();
  
  // Event listeners
  empleadoForm.addEventListener('submit', guardarEmpleado);
  btnLimpiar.addEventListener('click', limpiarFormulario);
  btnBuscar.addEventListener('click', buscarEmpleados);
  searchInput.addEventListener('keyup', (e) => {
    if (e.key === 'Enter') {
      buscarEmpleados();
    }
  });
});

// Función para cargar todos los empleados
async function cargarEmpleados() {
  try {
    const response = await fetch(API_URL);
    
    if (!response.ok) {
      throw new Error(`Error HTTP: ${response.status}`);
    }
    
    const data = await response.json();
    
    // Manejar la estructura específica de la respuesta
    if (data && data.$values) {
      empleados = data.$values;
    } else {
      empleados = data; // En caso de que la API devuelva un array directamente
    }
    
    renderizarTabla(empleados);
  } catch (error) {
    console.error('Error al cargar empleados:', error);
    mostrarNotificacion('Error al cargar los empleados. Intente nuevamente.', 'error');
  }
}

// Función para renderizar la tabla de empleados
function renderizarTabla(listaEmpleados) {
  tablaEmpleados.innerHTML = '';
  
  if (listaEmpleados.length === 0) {
    const row = tablaEmpleados.insertRow();
    const cell = row.insertCell();
    cell.colSpan = 7;
    cell.textContent = 'No hay empleados registrados';
    cell.style.textAlign = 'center';
    cell.style.padding = '1rem';
    return;
  }
  
  listaEmpleados.forEach(empleado => {
    const row = tablaEmpleados.insertRow();
    
    // Agregar celdas con los datos del empleado
    row.insertCell().textContent = empleado.empleadoID;
    row.insertCell().textContent = empleado.nombre;
    row.insertCell().textContent = empleado.apellido;
    row.insertCell().textContent = empleado.cargo || '---';
    row.insertCell().textContent = empleado.email || '---';
    row.insertCell().textContent = empleado.telefono || '---';
    
    // Celda para botones de acción
    const accionesCell = row.insertCell();
    
    // Botón Editar
    const btnEditar = document.createElement('button');
    btnEditar.className = 'btn-action btn-edit';
    btnEditar.innerHTML = '<i class="fas fa-edit"></i>';
    btnEditar.title = 'Editar';
    btnEditar.onclick = () => cargarEmpleadoParaEditar(empleado);
    accionesCell.appendChild(btnEditar);
    
    // Espacio entre botones
    accionesCell.appendChild(document.createTextNode(' '));
    
    // Botón Eliminar
    const btnEliminar = document.createElement('button');
    btnEliminar.className = 'btn-action btn-delete';
    btnEliminar.innerHTML = '<i class="fas fa-trash-alt"></i>';
    btnEliminar.title = 'Eliminar';
    btnEliminar.onclick = () => confirmarEliminarEmpleado(empleado.empleadoID);
    accionesCell.appendChild(btnEliminar);
  });
}

// Función para guardar un empleado (crear o actualizar)
async function guardarEmpleado(e) {
  e.preventDefault();
  
  if (!empleadoForm.checkValidity()) {
    empleadoForm.reportValidity();
    return;
  }
  
  const empleadoData = {
    nombre: nombreInput.value,
    apellido: apellidoInput.value,
    cargo: cargoInput.value || null,
    email: emailInput.value || null,
    telefono: telefonoInput.value || null
  };
  
  try {
    let response;
    let mensaje;
    
    if (editando) {
      // Actualizar empleado existente
      const id = parseInt(empleadoIdInput.value);
      empleadoData.empleadoID = id;
      
      response = await fetch(`${API_URL}/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(empleadoData)
      });
      
      mensaje = 'Empleado actualizado correctamente';
    } else {
      // Crear nuevo empleado
      response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(empleadoData)
      });
      
      mensaje = 'Empleado agregado correctamente';
    }
    
    if (!response.ok) {
      throw new Error(`Error HTTP: ${response.status}`);
    }
    
    mostrarNotificacion(mensaje, 'success');
    limpiarFormulario();
    cargarEmpleados();
  } catch (error) {
    console.error('Error al guardar empleado:', error);
    mostrarNotificacion('Error al guardar el empleado. Intente nuevamente.', 'error');
  }
}

// Función para cargar un empleado en el formulario para editar
function cargarEmpleadoParaEditar(empleado) {
  editando = true;
  document.querySelector('.form-section h2').textContent = 'Editar Empleado';
  
  empleadoIdInput.value = empleado.empleadoID;
  nombreInput.value = empleado.nombre;
  apellidoInput.value = empleado.apellido;
  cargoInput.value = empleado.cargo || '';
  emailInput.value = empleado.email || '';
  telefonoInput.value = empleado.telefono || '';
  
  // Hacer scroll hacia el formulario
  document.querySelector('.form-section').scrollIntoView({ behavior: 'smooth' });
}

// Función para confirmar y eliminar un empleado
function confirmarEliminarEmpleado(id) {
  if (confirm('¿Está seguro que desea eliminar este empleado?')) {
    eliminarEmpleado(id);
  }
}

// Función para eliminar un empleado
async function eliminarEmpleado(id) {
  try {
    const response = await fetch(`${API_URL}/${id}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) {
      throw new Error(`Error HTTP: ${response.status}`);
    }
    
    mostrarNotificacion('Empleado eliminado correctamente', 'success');
    cargarEmpleados();
  } catch (error) {
    console.error('Error al eliminar empleado:', error);
    mostrarNotificacion('Error al eliminar el empleado. Intente nuevamente.', 'error');
  }
}

// Función para limpiar el formulario
function limpiarFormulario() {
  editando = false;
  document.querySelector('.form-section h2').textContent = 'Nuevo Empleado';
  
  empleadoForm.reset();
  empleadoIdInput.value = '';
}

// Función para buscar empleados
function buscarEmpleados() {
  const busqueda = searchInput.value.toLowerCase().trim();
  
  if (!busqueda) {
    renderizarTabla(empleados);
    return;
  }
  
  const resultados = empleados.filter(empleado => 
    empleado.nombre.toLowerCase().includes(busqueda) || 
    empleado.apellido.toLowerCase().includes(busqueda) ||
    (empleado.cargo && empleado.cargo.toLowerCase().includes(busqueda)) ||
    (empleado.email && empleado.email.toLowerCase().includes(busqueda))
  );
  
  renderizarTabla(resultados);
}

// Función para mostrar notificaciones temporales
function mostrarNotificacion(mensaje, tipo) {
  // Esta es una implementación simple con alert
  // En una aplicación real se usaría un sistema de notificaciones más elegante
  if (tipo === 'error') {
    alert(`Error: ${mensaje}`);
  } else {
    alert(mensaje);
  }
}

ESPECIALIADES

// Variables globales
const API_URL = 'https://localhost:7207/api/Especialidades';
let modoEdicion = false;

document.addEventListener('DOMContentLoaded', function() {
    // Elementos del DOM
    const form = document.getElementById('especialidadForm');
    const idInput = document.getElementById('especialidadId');
    const nombreInput = document.getElementById('nombre');
    const descripcionInput = document.getElementById('descripcion');
    const btnSubmit = form.querySelector('button[type="submit"]');
    const btnLimpiar = document.getElementById('btnLimpiar');
    const searchInput = document.getElementById('searchInput');
    const btnBuscar = document.getElementById('btnBuscar');
    const tablaEspecialidades = document.getElementById('tablaEspecialidades');
    const formTitle = document.querySelector('.form-section h2');
    
    // Manejo del menú lateral
    const menuToggle = document.getElementById('menu-toggle');
    const closeMenu = document.getElementById('close-menu');
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('overlay');
    
    menuToggle.addEventListener('click', function() {
      sidebar.classList.add('active');
      overlay.classList.add('active');
      document.body.style.overflow = 'hidden';
    });
    
    function closeSidebar() {
      sidebar.classList.remove('active');
      overlay.classList.remove('active');
      document.body.style.overflow = '';
    }
    
    closeMenu.addEventListener('click', closeSidebar);
    overlay.addEventListener('click', closeSidebar);
    
    // Cargar especialidades al iniciar la página
    cargarEspecialidades();
    
    // Manejar envío del formulario
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      const especialidad = {
        nombre: nombreInput.value,
        descripcion: descripcionInput.value
      };
      
      if (modoEdicion) {
        especialidad.especialidadID = parseInt(idInput.value);
        actualizarEspecialidad(especialidad);
      } else {
        crearEspecialidad(especialidad);
      }
    });
    
    // Limpiar formulario y salir del modo edición
    btnLimpiar.addEventListener('click', () => {
      limpiarFormulario();
    });
    
    // Manejar búsqueda
    btnBuscar.addEventListener('click', () => {
      buscarEspecialidades();
    });
    
    // También permitir búsqueda al presionar Enter
    searchInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        buscarEspecialidades();
      }
    });
    
    // Funciones CRUD
    async function cargarEspecialidades() {
      try {
        mostrarCargando(true);
        const response = await fetch(API_URL);
        if (!response.ok) {
          throw new Error(`Error al cargar las especialidades. Código: ${response.status}`);
        }
        
        const data = await response.json();
        // Verifica la estructura de la respuesta y ajusta según sea necesario
        const especialidades = data.$values || data;
        renderizarTabla(especialidades);
        mostrarCargando(false);
      } catch (error) {
        mostrarCargando(false);
        console.error('Error:', error);
        mostrarMensaje(`Error al cargar las especialidades: ${error.message}`, 'error');
      }
    }
    
    async function crearEspecialidad(especialidad) {
      try {
        mostrarCargando(true);
        const response = await fetch(API_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(especialidad)
        });
        
        if (!response.ok) {
          throw new Error(`Error al crear la especialidad. Código: ${response.status}`);
        }
        
        mostrarMensaje('Especialidad creada con éxito', 'success');
        limpiarFormulario();
        cargarEspecialidades();
      } catch (error) {
        mostrarCargando(false);
        console.error('Error:', error);
        mostrarMensaje(`Error al crear la especialidad: ${error.message}`, 'error');
      }
    }
    
    async function actualizarEspecialidad(especialidad) {
      try {
        mostrarCargando(true);
        const response = await fetch(`${API_URL}/${especialidad.especialidadID}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(especialidad)
        });
        
        if (!response.ok) {
          throw new Error(`Error al actualizar la especialidad. Código: ${response.status}`);
        }
        
        mostrarMensaje('Especialidad actualizada con éxito', 'success');
        limpiarFormulario();
        cargarEspecialidades();
      } catch (error) {
        mostrarCargando(false);
        console.error('Error:', error);
        mostrarMensaje(`Error al actualizar la especialidad: ${error.message}`, 'error');
      }
    }
    
    async function eliminarEspecialidad(id) {
      if (!confirm('¿Está seguro de que desea eliminar esta especialidad?')) {
        return;
      }
      
      try {
        mostrarCargando(true);
        const response = await fetch(`${API_URL}/${id}`, {
          method: 'DELETE'
        });
        
        if (!response.ok) {
          throw new Error(`Error al eliminar la especialidad. Código: ${response.status}`);
        }
        
        mostrarMensaje('Especialidad eliminada con éxito', 'success');
        cargarEspecialidades();
      } catch (error) {
        mostrarCargando(false);
        console.error('Error:', error);
        mostrarMensaje(`Error al eliminar la especialidad: ${error.message}`, 'error');
      }
    }
    
    // Función para buscar especialidades
    async function buscarEspecialidades() {
      const termino = searchInput.value.trim().toLowerCase();
      
      try {
        mostrarCargando(true);
        const response = await fetch(API_URL);
        if (!response.ok) {
          throw new Error(`Error al buscar especialidades. Código: ${response.status}`);
        }
        
        const data = await response.json();
        const especialidades = data.$values || data;
        
        // Filtrar especialidades por el término de búsqueda
        const resultados = especialidades.filter(esp => 
          esp.nombre.toLowerCase().includes(termino) || 
          (esp.descripcion && esp.descripcion.toLowerCase().includes(termino))
        );
        
        renderizarTabla(resultados);
        mostrarCargando(false);
      } catch (error) {
        mostrarCargando(false);
        console.error('Error:', error);
        mostrarMensaje(`Error al buscar especialidades: ${error.message}`, 'error');
      }
    }
    
    // Funciones de utilidad
    function renderizarTabla(especialidades) {
      const tbody = tablaEspecialidades.querySelector('tbody');
      tbody.innerHTML = '';
      
      if (!especialidades || especialidades.length === 0) {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td colspan="4" class="text-center">No se encontraron especialidades</td>`;
        tbody.appendChild(tr);
        return;
      }
      
      especialidades.forEach(especialidad => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${especialidad.especialidadID}</td>
          <td>${especialidad.nombre}</td>
          <td class="descripcion-cell" title="${especialidad.descripcion || ''}">${especialidad.descripcion || ''}</td>
          <td>
            <button class="btn-action btn-edit" data-id="${especialidad.especialidadID}">
              <i class="fas fa-edit"></i>
            </button>
            <button class="btn-action btn-delete" data-id="${especialidad.especialidadID}">
              <i class="fas fa-trash-alt"></i>
            </button>
          </td>
        `;
        
        tbody.appendChild(tr);
      });
      
      configurarBotonesAcciones(especialidades);
    }
    
    function configurarBotonesAcciones(especialidades) {
      // Agregar eventos a los botones de editar
      document.querySelectorAll('.btn-edit').forEach(btn => {
        btn.addEventListener('click', () => {
          const id = btn.getAttribute('data-id');
          cargarEspecialidadParaEditar(id, especialidades);
        });
      });
      
      // Agregar eventos a los botones de eliminar
      document.querySelectorAll('.btn-delete').forEach(btn => {
        btn.addEventListener('click', () => {
          const id = btn.getAttribute('data-id');
          eliminarEspecialidad(id);
        });
      });
    }
    
    function cargarEspecialidadParaEditar(id, especialidades) {
      const especialidad = especialidades.find(esp => esp.especialidadID == id);
      
      if (especialidad) {
        idInput.value = especialidad.especialidadID;
        nombreInput.value = especialidad.nombre;
        descripcionInput.value = especialidad.descripcion || '';
        
        modoEdicion = true;
        btnSubmit.textContent = 'Actualizar';
        formTitle.textContent = 'Editar Especialidad';
        
        // Desplazarse al formulario
        document.querySelector('.form-section').scrollIntoView({ behavior: 'smooth' });
      }
    }
    
    function limpiarFormulario() {
      form.reset();
      idInput.value = '';
      modoEdicion = false;
      btnSubmit.textContent = 'Guardar';
      formTitle.textContent = 'Nueva Especialidad';
    }
    
    // Función para mostrar mensajes temporales
    function mostrarMensaje(mensaje, tipo) {
      // Verificar si ya existe un mensaje y eliminarlo
      const mensajeExistente = document.querySelector('.mensaje-alert');
      if (mensajeExistente) {
        mensajeExistente.remove();
      }
      
      // Crear el elemento de mensaje
      const mensajeElement = document.createElement('div');
      mensajeElement.className = `mensaje-alert ${tipo}`;
      mensajeElement.textContent = mensaje;
      
      // Insertar el mensaje después del encabezado de contenido
      const contentHeader = document.querySelector('.content-header');
      contentHeader.parentNode.insertBefore(mensajeElement, contentHeader.nextSibling);
      
      // Eliminar el mensaje después de 3 segundos
      setTimeout(() => {
        mensajeElement.remove();
      }, 3000);
    }
    
    // Función para mostrar un indicador de carga
    function mostrarCargando(mostrar) {
      // Remover el indicador existente, si existe
      const cargandoExistente = document.querySelector('.cargando-indicador');
      if (cargandoExistente) {
        cargandoExistente.remove();
      }
      
      if (mostrar) {
        // Crear y mostrar el indicador de carga
        const cargandoElement = document.createElement('div');
        cargandoElement.className = 'cargando-indicador';
        cargandoElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Cargando...';
        
        // Insertar el indicador después del encabezado de contenido
        const contentHeader = document.querySelector('.content-header');
        contentHeader.parentNode.insertBefore(cargandoElement, contentHeader.nextSibling);
      }
    }
    
    // Agregar estilos para el indicador de carga si no existen
    if (!document.getElementById('estilo-cargando')) {
      const style = document.createElement('style');
      style.id = 'estilo-cargando';
      style.textContent = `
        .cargando-indicador {
          display: flex;
          align-items: center;
          justify-content: center;
          padding: 10px;
          background-color: #f8f9fa;
          color: #495057;
          border-radius: 4px;
          margin-bottom: 15px;
        }
        .cargando-indicador i {
          margin-right: 8px;
        }
      `;
      document.head.appendChild(style);
    }
});

MÉDICOS

// Variables globales
let medicosData = [];
let especialidadesData = [];
let centrosData = [];
let editandoId = null;

// Eventos DOM
document.addEventListener('DOMContentLoaded', async () => {
  try {
    // Inicializar menú hamburguesa
    initMenuHamburguesa();
    
    // Cargar datos iniciales (usando await para asegurar el orden correcto)
    await cargarEspecialidades();
    await cargarCentrosMedicos();
    await cargarMedicos();
    
    // Configurar listeners
    document.getElementById('medicoForm').addEventListener('submit', guardarMedico);
    document.getElementById('btnLimpiar').addEventListener('click', limpiarFormulario);
    document.getElementById('btnBuscar').addEventListener('click', buscarMedicos);
    document.getElementById('searchInput').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') buscarMedicos();
    });
    
    console.log('Inicialización completada');
    console.log('Especialidades cargadas:', especialidadesData.length);
    console.log('Centros cargados:', centrosData.length);
    console.log('Médicos cargados:', medicosData.length);
  } catch (error) {
    console.error('Error durante la inicialización:', error);
    mostrarNotificacion('Error al inicializar la aplicación', 'error');
  }
});

// Funciones para el menú hamburguesa (sin cambios)
function initMenuHamburguesa() {
  const menuToggle = document.getElementById('menu-toggle');
  const closeMenu = document.getElementById('close-menu');
  const sidebar = document.getElementById('sidebar');
  const overlay = document.getElementById('overlay');
  
  menuToggle.addEventListener('click', () => {
    sidebar.classList.add('active');
    overlay.classList.add('active');
  });
  
  closeMenu.addEventListener('click', () => {
    sidebar.classList.remove('active');
    overlay.classList.remove('active');
  });
  
  overlay.addEventListener('click', () => {
    sidebar.classList.remove('active');
    overlay.classList.remove('active');
  });
}

// Funciones para cargar datos desde la API (modificadas para manejar mejor la estructura de datos)
async function cargarEspecialidades() {
  try {
    const response = await fetch('https://localhost:7207/api/Especialidades');
    if (!response.ok) {
      throw new Error(`Error al cargar especialidades: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    // Manejar diferentes estructuras posibles de datos
    especialidadesData = data.$values || data || [];
    
    console.log('Datos de especialidades:', especialidadesData);
    
    if (especialidadesData.length === 0) {
      console.warn('No se cargaron especialidades');
    }
    
    // Llenar selector de especialidades
    const especialidadSelect = document.getElementById('especialidad');
    especialidadSelect.innerHTML = '<option value="">Seleccionar especialidad</option>';
    
    especialidadesData.forEach(esp => {
      const option = document.createElement('option');
      option.value = esp.especialidadID;
      option.textContent = esp.nombre;
      especialidadSelect.appendChild(option);
    });
    
    return especialidadesData;
  } catch (error) {
    console.error('Error al cargar especialidades:', error);
    mostrarNotificacion('Error al cargar especialidades', 'error');
    return [];
  }
}

async function cargarCentrosMedicos() {
  try {
    const response = await fetch('https://localhost:7207/api/CentroMedicos');
    if (!response.ok) {
      throw new Error(`Error al cargar centros médicos: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    // Manejar diferentes estructuras posibles de datos
    centrosData = data.$values || data || [];
    
    console.log('Datos de centros médicos:', centrosData);
    
    if (centrosData.length === 0) {
      console.warn('No se cargaron centros médicos');
    }
    
    // Llenar selector de centros médicos
    const centroSelect = document.getElementById('centro');
    centroSelect.innerHTML = '<option value="">Seleccionar centro médico</option>';
    
    centrosData.forEach(centro => {
      const option = document.createElement('option');
      option.value = centro.centroID;
      option.textContent = centro.nombre;
      centroSelect.appendChild(option);
    });
    
    return centrosData;
  } catch (error) {
    console.error('Error al cargar centros médicos:', error);
    mostrarNotificacion('Error al cargar centros médicos', 'error');
    return [];
  }
}

async function cargarMedicos() {
  try {
    const response = await fetch('https://localhost:7207/api/MedicosApi');
    if (!response.ok) {
      throw new Error(`Error al cargar médicos: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    // Manejar diferentes estructuras posibles de datos
    medicosData = data.$values || data || [];
    
    console.log('Datos de médicos cargados:', medicosData);
    
    // Procesar los datos para asegurar que tienen el formato correcto
    medicosData = medicosData.map(medico => {
      // Si medico es una referencia, puede que necesitemos resolverlo
      if (medico.$ref) {
        // Intenta encontrar el objeto referenciado en los datos originales
        const refId = medico.$ref;
        // Esta es una simplificación, podrías necesitar un método más robusto
        const resolvedMedico = findReferenceById(data, refId);
        return resolvedMedico || medico;
      }
      return medico;
    });
    
    renderizarTablaMedicos(medicosData);
    return medicosData;
  } catch (error) {
    console.error('Error al cargar médicos:', error);
    mostrarNotificacion('Error al cargar médicos', 'error');
    return [];
  }
}

// Función para buscar referencias por ID (nuevo)
function findReferenceById(data, refId) {
  // Si el objeto actual tiene el id buscado
  if (data && data.$id === refId) {
    return data;
  }
  
  // Si es un array o un objeto con $values
  if (data && (Array.isArray(data) || data.$values)) {
    const values = Array.isArray(data) ? data : data.$values;
    if (values) {
      for (const item of values) {
        const found = findReferenceById(item, refId);
        if (found) return found;
      }
    }
  }
  
  // Si es un objeto, buscar en todas sus propiedades
  if (data && typeof data === 'object') {
    for (const key in data) {
      if (data.hasOwnProperty(key) && typeof data[key] === 'object') {
        const found = findReferenceById(data[key], refId);
        if (found) return found;
      }
    }
  }
  
  return null;
}

// Función mejorada para renderizar la tabla de médicos
function renderizarTablaMedicos(medicos) {
  const tbody = document.querySelector('#tablaMedicos tbody');
  tbody.innerHTML = '';
  
  if (!medicos || medicos.length === 0) {
    const tr = document.createElement('tr');
    tr.innerHTML = '<td colspan="7" class="text-center">No hay médicos registrados</td>';
    tbody.appendChild(tr);
    return;
  }
  
  console.log('Renderizando tabla con', medicos.length, 'médicos');
  
  medicos.forEach(medico => {
    // Verificar si medico tiene todas las propiedades necesarias
    if (!medico || typeof medico !== 'object') {
      console.error('Medico inválido:', medico);
      return;
    }
    
    const tr = document.createElement('tr');
    
    // Depuración
    console.log('Procesando médico:', medico);
    console.log('especialidadID:', medico.especialidadID);
    console.log('centroID:', medico.centroID);
    
    // Verificar si las especialidades y centros se cargaron correctamente
    if (especialidadesData.length === 0) {
      console.warn('Datos de especialidades no disponibles');
    }
    if (centrosData.length === 0) {
      console.warn('Datos de centros no disponibles');
    }
    
    // Encontrar nombres de especialidad y centro con mejor manejo de errores
    let especialidadNombre = 'Desconocida';
    let centroNombre = 'Desconocido';
    
    if (medico.especialidadID) {
      const especialidad = especialidadesData.find(e => e.especialidadID === medico.especialidadID);
      if (especialidad && especialidad.nombre) {
        especialidadNombre = especialidad.nombre;
      } else {
        console.warn(`Especialidad no encontrada para ID: ${medico.especialidadID}`);
      }
    }
    
    if (medico.centroID) {
      const centro = centrosData.find(c => c.centroID === medico.centroID);
      if (centro && centro.nombre) {
        centroNombre = centro.nombre;
      } else {
        console.warn(`Centro médico no encontrado para ID: ${medico.centroID}`);
      }
    }
    
    // Asegurarnos de que todos los campos existan o usar valores por defecto
    const id = medico.medicoID || 'N/A';
    const nombre = medico.nombre || '';
    const apellido = medico.apellido || '';
    const email = medico.email || '';
    const telefono = medico.telefono || '';
    
    tr.innerHTML = `
      <td>${id}</td>
      <td>${nombre} ${apellido}</td>
      <td>${especialidadNombre}</td>
      <td>${centroNombre}</td>
      <td>${email}</td>
      <td>${telefono}</td>
      <td>
        <button class="btn-action btn-edit" data-id="${id}">
          <i class="fas fa-edit"></i>
        </button>
        <button class="btn-action btn-delete" data-id="${id}">
          <i class="fas fa-trash"></i>
        </button>
      </td>
    `;
    
    tbody.appendChild(tr);
  });
  
  // Agregar event listeners a los botones de acción
  document.querySelectorAll('.btn-edit').forEach(btn => {
    btn.addEventListener('click', () => editarMedico(parseInt(btn.dataset.id)));
  });
  
  document.querySelectorAll('.btn-delete').forEach(btn => {
    btn.addEventListener('click', () => eliminarMedico(parseInt(btn.dataset.id)));
  });
}

// Función mejorada para guardar médico (crear o actualizar)
async function guardarMedico(e) {
  e.preventDefault();
  
  try {
    // Obtener datos del formulario
    const formData = {
      nombre: document.getElementById('nombre').value.trim(),
      apellido: document.getElementById('apellido').value.trim(),
      especialidadID: parseInt(document.getElementById('especialidad').value),
      centroID: parseInt(document.getElementById('centro').value),
      email: document.getElementById('email').value.trim(),
      telefono: document.getElementById('telefono').value.trim()
    };
    
    // Validar datos
    const camposFaltantes = [];
    if (!formData.nombre) camposFaltantes.push('Nombre');
    if (!formData.apellido) camposFaltantes.push('Apellido');
    if (isNaN(formData.especialidadID)) camposFaltantes.push('Especialidad');
    if (isNaN(formData.centroID)) camposFaltantes.push('Centro médico');
    if (!formData.email) camposFaltantes.push('Email');
    if (!formData.telefono) camposFaltantes.push('Teléfono');
    
    if (camposFaltantes.length > 0) {
      mostrarNotificacion(`Por favor, complete los siguientes campos: ${camposFaltantes.join(', ')}`, 'error');
      return;
    }
    
    let url = 'https://localhost:7207/api/MedicosApi';
    let method = 'POST';
    
    // Si estamos editando, cambiar método y URL
    if (editandoId) {
      url += `/${editandoId}`;
      method = 'PUT';
      formData.medicoID = editandoId;
    }
    
    console.log(`Enviando solicitud ${method} a ${url} con datos:`, formData);
    
    const response = await fetch(url, {
      method: method,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formData)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error al guardar médico: ${response.status} ${response.statusText} - ${errorText}`);
    }
    
    // Verificar si la respuesta tiene contenido antes de intentar parsearla como JSON
    const contentType = response.headers.get("content-type");
    let responseData;
    
    if (contentType && contentType.includes("application/json") && response.status !== 204) {
      // Solo parsear como JSON si hay contenido y es del tipo correcto
      const text = await response.text();
      if (text && text.trim()) {
        responseData = JSON.parse(text);
        console.log('Respuesta del servidor:', responseData);
      } else {
        console.log('Respuesta del servidor vacía pero operación exitosa');
      }
    } else {
      console.log('Operación exitosa, sin datos JSON en la respuesta');
    }
    
    // Mostrar mensaje de éxito
    mostrarNotificacion(
      editandoId ? 'Médico actualizado correctamente' : 'Médico agregado correctamente', 
      'success'
    );
    
    // Recargar datos y limpiar formulario
    await cargarMedicos();
    limpiarFormulario();
  } catch (error) {
    console.error('Error al guardar médico:', error);
    mostrarNotificacion(`Error al guardar médico: ${error.message}`, 'error');
  }
}

// Función mejorada para editar médico
function editarMedico(id) {
  console.log('Editando médico con ID:', id);
  
  if (isNaN(id)) {
    console.error('ID de médico inválido:', id);
    mostrarNotificacion('Error: ID de médico inválido', 'error');
    return;
  }
  
  const medico = medicosData.find(m => m.medicoID === id);
  if (!medico) {
    console.error('Médico no encontrado con ID:', id);
    mostrarNotificacion('Error: Médico no encontrado', 'error');
    return;
  }
  
  console.log('Datos del médico a editar:', medico);
  
  // Actualizar formulario con datos del médico
  document.getElementById('formTitle').textContent = 'Editar Médico';
  document.getElementById('medicoId').value = medico.medicoID;
  document.getElementById('nombre').value = medico.nombre || '';
  document.getElementById('apellido').value = medico.apellido || '';
  document.getElementById('especialidad').value = medico.especialidadID || '';
  document.getElementById('centro').value = medico.centroID || '';
  document.getElementById('email').value = medico.email || '';
  document.getElementById('telefono').value = medico.telefono || '';
  
  // Establecer modo de edición
  editandoId = medico.medicoID;
  
  // Desplazarse hacia el formulario
  document.querySelector('.form-section').scrollIntoView({ behavior: 'smooth' });
}

// Función mejorada para eliminar médico
async function eliminarMedico(id) {
  console.log('Eliminando médico con ID:', id);
  
  if (isNaN(id)) {
    console.error('ID de médico inválido:', id);
    mostrarNotificacion('Error: ID de médico inválido', 'error');
    return;
  }
  
  if (!confirm('¿Está seguro de que desea eliminar este médico?')) {
    return;
  }
  
  try {
    const url = `https://localhost:7207/api/MedicosApi/${id}`;
    console.log(`Enviando solicitud DELETE a ${url}`);
    
    const response = await fetch(url, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error al eliminar médico: ${response.status} ${response.statusText} - ${errorText}`);
    }
    
    console.log('Médico eliminado con éxito');
    mostrarNotificacion('Médico eliminado correctamente', 'success');
    
    // Recargar médicos
    await cargarMedicos();
    
    // Si estábamos editando el mismo médico, limpiar formulario
    if (editandoId === id) {
      limpiarFormulario();
    }
  } catch (error) {
    console.error('Error al eliminar médico:', error);
    mostrarNotificacion(`Error al eliminar médico: ${error.message}`, 'error');
  }
}

// Función mejorada para limpiar formulario
function limpiarFormulario() {
  document.getElementById('medicoForm').reset();
  document.getElementById('formTitle').textContent = 'Nuevo Médico';
  document.getElementById('medicoId').value = '';
  editandoId = null;
  console.log('Formulario limpiado');
}

// Función mejorada para buscar médicos
function buscarMedicos() {
  const termino = document.getElementById('searchInput').value.toLowerCase().trim();
  console.log('Buscando médicos con término:', termino);
  
  if (!termino) {
    console.log('Término de búsqueda vacío, mostrando todos los médicos');
    renderizarTablaMedicos(medicosData);
    return;
  }
  
  // Filtrar médicos según término de búsqueda
  const medicosFiltered = medicosData.filter(medico => {
    if (!medico) return false;
    
    // Buscar en nombre y apellido
    if ((medico.nombre && medico.nombre.toLowerCase().includes(termino)) || 
        (medico.apellido && medico.apellido.toLowerCase().includes(termino))) {
      return true;
    }
    
    // Buscar en especialidad
    const especialidad = especialidadesData.find(e => e.especialidadID === medico.especialidadID);
    if (especialidad && especialidad.nombre && especialidad.nombre.toLowerCase().includes(termino)) {
      return true;
    }
    
    // Buscar en centro médico
    const centro = centrosData.find(c => c.centroID === medico.centroID);
    if (centro && centro.nombre && centro.nombre.toLowerCase().includes(termino)) {
      return true;
    }
    
    // Buscar en email o teléfono
    return (medico.email && medico.email.toLowerCase().includes(termino)) || 
           (medico.telefono && medico.telefono.toLowerCase().includes(termino));
  });
  
  console.log(`Filtro aplicado: ${medicosFiltered.length} médicos encontrados`);
  renderizarTablaMedicos(medicosFiltered);
}

// Función mejorada para mostrar notificaciones (sin cambios esenciales)
function mostrarNotificacion(mensaje, tipo) {
  console.log(`Notificación (${tipo}): ${mensaje}`);
  
  // Verificar si ya existe una notificación
  let notificacion = document.querySelector('.notificacion');
  
  if (notificacion) {
    // Remover notificación existente
    notificacion.remove();
  }
  
  // Crear nueva notificación
  notificacion = document.createElement('div');
  notificacion.className = `notificacion ${tipo}`;
  notificacion.textContent = mensaje;
  
  // Estilos para la notificación
  notificacion.style.position = 'fixed';
  notificacion.style.top = '20px';
  notificacion.style.right = '20px';
  notificacion.style.padding = '10px 20px';
  notificacion.style.borderRadius = '4px';
  notificacion.style.zIndex = '1050';
  notificacion.style.opacity = '0';
  notificacion.style.transition = 'opacity 0.3s ease-in-out';
  
  // Estilos según tipo
  if (tipo === 'success') {
    notificacion.style.backgroundColor = 'var(--primary-light)';
    notificacion.style.color = 'white';
  } else {
    notificacion.style.backgroundColor = 'var(--danger)';
    notificacion.style.color = 'white';
  }
  
  // Agregar al DOM
  document.body.appendChild(notificacion);
  
  // Mostrar con animación
  setTimeout(() => {
    notificacion.style.opacity = '1';
  }, 10);
  
  // Ocultar después de 3 segundos
  setTimeout(() => {
    notificacion.style.opacity = '0';
    setTimeout(() => {
      notificacion.remove();
    }, 300);
  }, 3000);
}
